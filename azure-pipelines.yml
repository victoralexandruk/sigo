# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

# specific path build
# trigger:
#   batch: true
#   branches:
#     include:
#     - master

variables:
  # Agent VM image name
  vmImageName: 'ubuntu-latest'

stages:
- stage: Build
  displayName: Build stage
  jobs:  
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)
    steps:
    # - task: SSH@0
    #   displayName: SIGO.Normas
    #   inputs:
    #     sshEndpoint: 'VM BlueLake'
    #     runOptions: 'script'
    #     scriptPath: 'docker_build_deploy.sh'
    #     args: '$(GITHUB_URL_WITH_TOKEN) SIGO.Normas/Dockerfile sigo/normas:dev sigo_normas'
    #     readyTimeout: '20000'
    - task: CopyFilesOverSSH@0
      inputs:
        sshEndpoint: 'VM BlueLake'
        contents: 'docker-compose.yml'
        readyTimeout: '20000'
    - task: SSH@0
      displayName: SIGO.Normas
      inputs:
        sshEndpoint: 'VM BlueLake'
        runOptions: 'commands'
        commands: 'docker-compose up'
        readyTimeout: '20000'
      

# - stage: Deploy
#   displayName: Deploy stage
#   dependsOn: Build
#   condition: succeeded()
#   jobs:
#   - deployment: Deploy
#     displayName: Deploy
#     pool: 
#       vmImage: $(vmImageName)
#     strategy:
#       runOnce:
#         deploy:
#           steps:            
#           - task: AzureWebApp@1
#             displayName: 'Azure Web App Deploy: egpnode'
#             inputs:
#               azureSubscription: $(azureSubscription)
#               appType: webAppLinux
#               appName: $(webAppName)
#               runtimeStack: 'NODE|10.10'
#               package: $(Pipeline.Workspace)/drop/$(Build.BuildId).zip
#               startUpCommand: 'npm run start'